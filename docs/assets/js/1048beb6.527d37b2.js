"use strict";(self.webpackChunksync_powershell=self.webpackChunksync_powershell||[]).push([[8060],{637:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/11/01/index","metadata":{"permalink":"/help/blog/2023/11/01/index","source":"@site/blog/2023-11-01/index.md","title":"Added CPM and ProjProperties","description":"One of the problem with NuGet are version .One of the problems with version is that ,in the same sln, inadvertently add 2 NuGets with different versions.","date":"2023-11-01T00:00:00.000Z","formattedDate":"November 1, 2023","tags":[],"readingTime":1.185,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"nextItem":{"title":"Added deployment","permalink":"/help/blog/2023/10/31/index"}},"content":"One of the problem with NuGet are version .One of the problems with version is that ,in the same sln, inadvertently add 2 NuGets with different versions.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nThe solution is CPM and ProjProperties. \\r\\n\\r\\nFor CPM please read https://learn.microsoft.com/en-us/nuget/consume-packages/Central-Package-Management \\r\\n\\r\\nFor ProjProperties please read https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-by-directory?view=vs-2022\\r\\n\\r\\nIn practice I have added near the sln a file named Directory.Packages.props with the following content\\r\\n```xml\\r\\n<Project>\\r\\n  <PropertyGroup>\\r\\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\\r\\n  </PropertyGroup>\\r\\n  <ItemGroup>\\r\\n    <PackageVersion Include=\\"Microsoft.Extensions.Logging.Abstractions\\" Version=\\"7.0.1\\" />\\r\\n    <PackageVersion Include=\\"RSCG_Static\\" Version=\\"2023.8.23.2100\\" />\\r\\n    <PackageVersion Include=\\"Refit\\" Version=\\"7.0.0\\" />\\r\\n    <PackageVersion Include=\\"RSCG_Decorator\\" Version=\\"7.2023.930.2116\\" />\\r\\n    <PackageVersion Include=\\"RSCG_DecoratorCommon\\" Version=\\"7.2023.930.2116\\" />\\r\\n    <PackageVersion Include=\\"Divergic.Logging.Xunit\\" Version=\\"4.2.0\\" />\\r\\n    <PackageVersion Include=\\"FluentAssertions\\" Version=\\"6.12.0\\" />\\r\\n    <PackageVersion Include=\\"LightBDD.XUnit2\\" Version=\\"3.7.0\\" />\\r\\n    <PackageVersion Include=\\"Microsoft.NET.Test.Sdk\\" Version=\\"17.8.0\\" />\\r\\n    <PackageVersion Include=\\"NLog.Extensions.Logging\\" Version=\\"5.3.5\\" />\\r\\n    <PackageVersion Include=\\"xunit\\" Version=\\"2.6.1\\" />\\r\\n    <PackageVersion Include=\\"Rocks\\" Version=\\"7.2.0\\" />\\r\\n    <PackageVersion Include=\\"xunit.runner.visualstudio\\" Version=\\"2.5.3\\">\\r\\n    </PackageVersion>\\r\\n    <PackageVersion Include=\\"coverlet.collector\\" Version=\\"6.0.0\\">\\r\\n    </PackageVersion>\\r\\n    <PackageVersion Include=\\"Asp.Versioning.Mvc.ApiExplorer\\" Version=\\"7.1.0\\" />\\r\\n    <PackageVersion Include=\\"Asp.Versioning.Mvc\\" Version=\\"7.1.0\\" />\\r\\n    <PackageVersion Include=\\"NLog\\" Version=\\"5.2.5\\" />\\r\\n    <PackageVersion Include=\\"NLog.Web.AspNetCore\\" Version=\\"5.3.5\\" />\\r\\n    <PackageVersion Include=\\"Swashbuckle.AspNetCore\\" Version=\\"6.5.0\\" />\\r\\n    <PackageVersion Include=\\"AMSWebAPI\\" Version=\\"2023.5.21.1551\\" />\\r\\n    <PackageVersion Include=\\"AMS_Base\\" Version=\\"2023.5.21.1551\\" />\\r\\n    <PackageVersion Include=\\"RSCG_AMS\\" Version=\\"2023.5.21.1551\\" />\\r\\n    <PackageVersion Include=\\"Microsoft.AspNetCore.OpenApi\\" Version=\\"7.0.13\\" />\\r\\n    <PackageVersion Include=\\"NetCore2Blockly\\" Version=\\"7.2023.427.2025\\" />\\r\\n    <PackageVersion Include=\\"NetCore7ShortLinks\\" Version=\\"7.2023.506.10\\" />\\r\\n    <PackageVersion Include=\\"NetCoreUsefullEndpoints\\" Version=\\"7.2023.916.1715\\" />\\r\\n    <PackageVersion Include=\\"RSCG_WebAPIExports\\" Version=\\"2023.8.16.1958\\" OutputItemType=\\"Analyzer\\" ReferenceOutputAssembly=\\"true\\" />\\r\\n    <PackageVersion Include=\\"RSCG_TimeBombComment\\" Version=\\"2023.10.21.806\\" />\\r\\n  </ItemGroup>\\r\\n</Project>\\r\\n```\\r\\n\\r\\nand remove all version references from packages in all projects\\r\\n\\r\\nSee \\r\\n\\r\\n![Version differences](/img/diffVersion.png)\\r\\n\\r\\n\\r\\nAlso , for passing all projects from net7.0 to anything one can use Directory.Build.props\\r\\n\\r\\n```xml\\r\\n<Project>\\r\\n    <PropertyGroup>\\r\\n        <TargetFramework>net7.0</TargetFramework>\\r\\n        <ImplicitUsings>enable</ImplicitUsings>\\r\\n        <Nullable>enable</Nullable>\\r\\n    </PropertyGroup>\\r\\n    <PropertyGroup>\\r\\n        <EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\\r\\n        <CompilerGeneratedFilesOutputPath>$(BaseIntermediateOutputPath)\\\\GX</CompilerGeneratedFilesOutputPath>\\r\\n    </PropertyGroup>\\r\\n\\r\\n</Project>\\r\\n```\\r\\n\\r\\nAnd now the projects can be like this\\r\\n\\r\\n\\r\\n![Target differences](/img/diffTarget.png)\\r\\n\\r\\n\\r\\nhttps://github.com/dotnet/sdk/issues/11432\\r\\n\\r\\ndelete the %USERPROFILE%\\\\.dotnet\\\\toolResolverCache"},{"id":"/2023/10/31/index","metadata":{"permalink":"/help/blog/2023/10/31/index","source":"@site/blog/2023-10-31/index.md","title":"Added deployment","description":"After this ADR","date":"2023-10-31T00:00:00.000Z","formattedDate":"October 31, 2023","tags":[],"readingTime":1.21,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Added CPM and ProjProperties","permalink":"/help/blog/2023/11/01/index"},"nextItem":{"title":"Added deployment","permalink":"/help/blog/2023/10/30/index"}},"content":"import ADR007 from \'../../docs/ADR/ADR007.md\'\\r\\n\\r\\n\\r\\nAfter this ADR \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n***\\r\\n<ADR007 />\\r\\n\\r\\nI have created the custom exception base class\\r\\n\\r\\n```csharp\\r\\nnamespace syncPowershellException;\\r\\npublic abstract class BaseAppException: Exception\\r\\n{\\r\\n    public BaseAppException(string message): base(message)\\r\\n    {\\r\\n        \\r\\n    }\\r\\n    public BaseAppException(string message, Exception inner)\\r\\n        : base(message, inner)\\r\\n    {\\r\\n    }\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nI resisted to the temptation to create a custom exception for every error.  Example : \\r\\n\\r\\n```csharp\\r\\nArgumentNullException.ThrowIfNull(data);\\r\\n```\\r\\n\\r\\nshould be left as it is.\\r\\n\\r\\nInstead ,look at this example:\\r\\n\\r\\n```csharp\\r\\npublic async Task<DataToBeSent> GetData()\\r\\n{\\r\\n    var powershell7Profile =environment.GetFolderPath( Environment.SpecialFolder.MyDocuments );\\r\\n    powershell7Profile = path.Combine(powershell7Profile, \\"WindowsPowerShell\\", \\"Microsoft.PowerShell_profile.ps1\\");\\r\\n    DataToBeSent dataToBeSent = new ();\\r\\n    dataToBeSent.UserName=environment.UserName;\\r\\n    dataToBeSent.PC = environment.MachineName;\\r\\n    if (file.Exists(powershell7Profile))\\r\\n    {\\r\\n        dataToBeSent.Powershell = await file.ReadAllTextAsync(powershell7Profile, CancellationToken.None);\\r\\n        dataToBeSent.PowershellNumber = 7;\\r\\n    }\\r\\n    return dataToBeSent;\\r\\n}\\r\\n```\\r\\n\\r\\nIf the file does not exists , then an error must be thrown. \\r\\n\\r\\n```csharp\\r\\npublic class PowershellProfileNotExistsException : BaseAppException\\r\\n{\\r\\n    public readonly string fileName;\\r\\n\\r\\n    public PowershellProfileNotExistsException(string fileName) : base($\\"file {fileName} does not exists\\")\\r\\n    {\\r\\n        this.fileName = fileName;\\r\\n    }\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\nAnd the code will be modified like this:\\r\\n\\r\\n```csharp\\r\\npublic async Task<DataToBeSent> GetData()\\r\\n{\\r\\n    var powershell7Profile =environment.GetFolderPath( Environment.SpecialFolder.MyDocuments );\\r\\n    powershell7Profile = path.Combine(powershell7Profile, \\"WindowsPowerShell\\", \\"Microsoft.PowerShell_profile.ps1\\");\\r\\n    DataToBeSent dataToBeSent = new ();\\r\\n    dataToBeSent.UserName=environment.UserName;\\r\\n    dataToBeSent.PC = environment.MachineName;\\r\\n    if (!file.Exists(powershell7Profile))\\r\\n        throw new PowershellProfileNotExistsException(powershell7Profile);\\r\\n        \\r\\n    dataToBeSent.Powershell = await file.ReadAllTextAsync(powershell7Profile, CancellationToken.None);\\r\\n    dataToBeSent.PowershellNumber = 7;\\r\\n    \\r\\n    \\r\\n    return dataToBeSent;\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\nAlso the test will be modified from\\r\\n```csharp\\r\\nDataGatherer gatherer = new(en.Instance(), file.Instance(),path.Instance(), logger);\\r\\ndata = await gatherer.GetData();\\r\\ndata.Should().NotBeNull();\\r\\n```\\r\\n\\r\\nto \\r\\n\\r\\n\\r\\n```csharp\\r\\nDataGatherer gatherer = new(en.Instance(), file.Instance(),path.Instance(), logger);\\r\\nvar X=async ()=> (await gatherer.GetData());\\r\\nawait X.Should().ThrowAsync<PowershellProfileNotExistsException>();\\r\\n```"},{"id":"/2023/10/30/index","metadata":{"permalink":"/help/blog/2023/10/30/index","source":"@site/blog/2023-10-30/index.md","title":"Added deployment","description":"After this ADR","date":"2023-10-30T00:00:00.000Z","formattedDate":"October 30, 2023","tags":[],"readingTime":1.27,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Added deployment","permalink":"/help/blog/2023/10/31/index"},"nextItem":{"title":"Added versioning","permalink":"/help/blog/2023/10/29/index"}},"content":"import ADR006 from \'../../docs/ADR/ADR006.md\'\\r\\n\\r\\n\\r\\nAfter this ADR \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n***\\r\\n<ADR006 />\\r\\n\\r\\n***\\r\\n\\r\\nIt was just creating the WebApp on Azure and letting generate the Github Action.\\r\\n\\r\\nNow the only thing that I need to do is to integrate the documentation on wwwroot.\\r\\n\\r\\nI have an Github workflow that is building the documentation and the site and running the tests.\\r\\n\\r\\nThe other Github file is taking the output of the build and deploying it to Azure.\\r\\n\\r\\n```yaml\\r\\n# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy\\r\\n# More GitHub Actions for Azure: https://github.com/Azure/actions\\r\\n\\r\\nname: Build and deploy ASP.Net Core app to Azure Web App - syncPowershell\\r\\n\\r\\non:\\r\\n  push:\\r\\n    branches:\\r\\n      - main\\r\\n  workflow_dispatch:\\r\\n  \\r\\njobs:\\r\\n  mainBuild:\\r\\n    uses: ./.github/workflows/build.yml \\r\\n  build:\\r\\n    needs: [mainBuild]\\r\\n    runs-on: ubuntu-latest\\r\\n\\r\\n    steps:\\r\\n      - uses: actions/checkout@v4\\r\\n\\r\\n      - name: Set up .NET Core\\r\\n        uses: actions/setup-dotnet@v3\\r\\n        with:\\r\\n          dotnet-version: 7.0.x\\r\\n          include-prerelease: false\\r\\n\\r\\n      # - name: Build with dotnet\\r\\n      #   run: |\\r\\n      #       cd src\\r\\n      #       cd SyncPowershell\\r\\n      #       dotnet build --configuration Release\\r\\n      - name: Download artifact from build job\\r\\n        uses: actions/download-artifact@v3\\r\\n        with:\\r\\n          name: docusaurusBuild\\r\\n          path: src/SyncPowershell/syncPowershellWebAPI/wwwroot/help/\\r\\n\\r\\n      - name: dotnet publish\\r\\n        run: |\\r\\n            cd src\\r\\n            cd SyncPowershell\\r\\n            cd syncPowershellWebAPI\\r\\n            dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp\\r\\n\\r\\n      - name: Upload artifact for deployment job\\r\\n        uses: actions/upload-artifact@v3\\r\\n        with:\\r\\n          name: .net-app\\r\\n          path: ${{env.DOTNET_ROOT}}/myapp\\r\\n          retention-days: 1\\r\\n\\r\\n  deploy:\\r\\n    runs-on: ubuntu-latest\\r\\n    needs: build\\r\\n    environment:\\r\\n      name: \'Production\'\\r\\n      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}\\r\\n\\r\\n    steps:\\r\\n      - name: Download artifact from build job\\r\\n        uses: actions/download-artifact@v3\\r\\n        with:\\r\\n          name: .net-app\\r\\n\\r\\n      - name: Deploy to Azure Web App\\r\\n        id: deploy-to-webapp\\r\\n        uses: azure/webapps-deploy@v2\\r\\n        with:\\r\\n          app-name: \'syncPowershell\'\\r\\n          slot-name: \'Production\'\\r\\n          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_49083FF1076F49D1AE72DCB84FCB1E50 }}\\r\\n          package: .\\r\\n\\r\\n```"},{"id":"/2023/10/29/index","metadata":{"permalink":"/help/blog/2023/10/29/index","source":"@site/blog/2023-10-29/index.md","title":"Added versioning","description":"It is difficult to find documentation about what packages to add for versioning WebAPI .","date":"2023-10-29T00:00:00.000Z","formattedDate":"October 29, 2023","tags":[],"readingTime":0.31,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Added deployment","permalink":"/help/blog/2023/10/30/index"},"nextItem":{"title":"Adding WebAPI","permalink":"/help/blog/2023/10/28/index"}},"content":"It is difficult to find documentation about what packages to add for versioning WebAPI .\\r\\n\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n\\r\\nFor me , this was working\\r\\n\\r\\n```xml\\r\\n<ItemGroup>\\r\\n<PackageReference Include=\\"Asp.Versioning.Mvc.ApiExplorer\\" Version=\\"7.1.0\\" />\\r\\n<PackageReference Include=\\"Asp.Versioning.Mvc\\" Version=\\"7.1.0\\" />\\r\\n</ItemGroup>\\t\\r\\n```\\r\\nand in Program.cs\\r\\n\\r\\n```csharp\\r\\nbuilder.Services.AddApiVersioning();\\r\\nbuilder.Services.AddEndpointsApiExplorer();\\r\\n```\\r\\n\\r\\nand the controller\\r\\n```csharp\\r\\n[Route(\\"api/[controller]/v{version:apiVersion}/[action]\\")]\\r\\n[ApiController]\\r\\n[ApiVersion(1.0)]\\r\\npublic class DataController : ControllerBase\\r\\n```\\r\\n\\r\\nThe documentation is sparse here:\\r\\n\\r\\nhttps://github.com/dotnet/aspnet-api-versioning/wiki/Existing-Services\\r\\n\\r\\nhttps://github.com/dotnet/aspnet-api-versioning/wiki/New-Services-Quick-Start\\r\\n\\r\\nhttps://github.com/dotnet/aspnet-api-versioning/wiki/Versioning-via-the-URL-Path"},{"id":"/2023/10/28/index","metadata":{"permalink":"/help/blog/2023/10/28/index","source":"@site/blog/2023-10-28/index.md","title":"Adding WebAPI","description":"Adding WebAPI is not big deal. But what do you need , for a Good functionality ?","date":"2023-10-28T00:00:00.000Z","formattedDate":"October 28, 2023","tags":[],"readingTime":1.385,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Added versioning","permalink":"/help/blog/2023/10/29/index"},"nextItem":{"title":"Adding logging","permalink":"/help/blog/2023/10/12/index"}},"content":"Adding WebAPI is not big deal. But what do you need , for a Good functionality ?\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nI want to add first the packages that I have created \\r\\n\\r\\n\\r\\n```xml\\r\\n<ItemGroup>\\r\\n    <PackageReference Include=\\"Swashbuckle.AspNetCore\\" Version=\\"6.5.0\\" />\\r\\n\\t<PackageReference Include=\\"Microsoft.AspNetCore.OpenApi\\" Version=\\"7.0.13\\" />\\r\\n</ItemGroup>\\r\\n<ItemGroup>\\r\\n  <PackageReference Include=\\"AMSWebAPI\\" Version=\\"2023.5.21.1551\\" />\\r\\n  <PackageReference Include=\\"AMS_Base\\" Version=\\"2023.5.21.1551\\" />\\r\\n\\t<PackageReference Include=\\"RSCG_AMS\\" Version=\\"2023.5.21.1551\\" ReferenceOutputAssembly=\\"false\\" OutputItemType=\\"Analyzer\\" />\\r\\n  <PackageReference Include=\\"NetCore2Blockly\\" Version=\\"7.2023.427.2025\\" />\\r\\n  <PackageReference Include=\\"NetCore7ShortLinks\\" Version=\\"7.2023.506.10\\" />\\r\\n  <PackageReference Include=\\"NetCoreUsefullEndpoints\\" Version=\\"7.2023.916.1715\\" />\\r\\n  <PackageReference Include=\\"RSCG_WebAPIExports\\" Version=\\"2023.8.16.1958\\" OutputItemType=\\"Analyzer\\" ReferenceOutputAssembly=\\"true\\"/>\\r\\n\\t<PackageReference Include=\\"RSCG_TimeBombComment\\" Version=\\"2023.10.21.806\\" />\\r\\n</ItemGroup>\\r\\n```\\r\\n\\r\\nI have put first a global.cs\\r\\n```csharp\\r\\nglobal using AMSWebAPI;\\r\\nglobal using NetCore2BlocklyNew;\\r\\nglobal using NetCoreShortLinks;\\r\\nglobal using UsefullExtensions;\\r\\nglobal using WebApiExportToFile;\\r\\n#region AMS\\r\\n[assembly: AMS_Base.VersionReleased(Name = \\"FirstRelease\\", ISODateTime = \\"2023-10-28\\", recordData = AMS_Base.RecordData.Merges)]\\r\\n#endregion\\r\\n```\\r\\nand the code is\\r\\n\\r\\n```csharp\\r\\nvar builder = WebApplication.CreateBuilder(args);\\r\\n\\r\\n// Add services to the container.\\r\\n\\r\\nbuilder.Services.AddControllers();\\r\\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\\r\\nbuilder.Services.AddEndpointsApiExplorer();\\r\\nbuilder.Services.AddSwaggerGen();\\r\\n#region export webapi\\r\\n//WebApiExportToFile.Extensions.AddExport(builder.Services);\\r\\nbuilder.Services.AddExport();\\r\\n#endregion\\r\\n\\r\\n#region links\\r\\nbuilder.Services.AddShortUrl();\\r\\n#endregion\\r\\n#region usefull endpoints\\r\\nbuilder.Services.AddSingleton<MiddlewareShutdown>();\\r\\n#endregion\\r\\nvar app = builder.Build();\\r\\n\\r\\n// Configure the HTTP request pipeline.\\r\\n//if (app.Environment.IsDevelopment())\\r\\n{\\r\\n    app.UseSwagger();\\r\\n    app.UseSwaggerUI();\\r\\n}\\r\\n//WebApiExportToFile.Extensions.UseExport(app);\\r\\napp.UseExport();\\r\\n#region links\\r\\napp.UseShortUrl();\\r\\n#endregion\\r\\n//app.UseHttpsRedirection();\\r\\n#region usefull endpoints\\r\\napp.MapUsefullAll();\\r\\napp.MapHostedServices(app.Services.GetServices<IHostedService>().ToArray());\\r\\n//app.MapUsefullConfiguration();\\r\\n#endregion\\r\\n//app.UseAuthorization();\\r\\n#region blockly\\r\\napp.UseBlocklyUI(app.Environment);\\r\\n#endregion\\r\\napp.MapControllers();\\r\\n#region blockly\\r\\napp.UseBlocklyAutomation();\\r\\n#endregion\\r\\n\\r\\n#region ams\\r\\napp.UseAMS();\\r\\n#endregion\\r\\n\\r\\n#region links\\r\\napp.MapShortUrlEndpoints();\\r\\n#endregion\\r\\napp.Run();\\r\\n\\r\\n```\\r\\n\\r\\nAdding those API the number of packages increased from 108 to 157 ( 45% increase! )\\r\\n\\r\\nThe purpose of packages:\\r\\n\\r\\nUseBlocklyAutomation -  adding macro capabilities to API\\r\\n\\r\\nAMS - versioning the project with latest git versions\\r\\n\\r\\nUsefullEndpoints -  adding start date, verifying errors, others ...\\r\\n\\r\\nWebAPIExports - adding xlsx export to any endpoint\\r\\n\\r\\nShortUrl - remembering what the url with html was requested successfully\\r\\n\\r\\nTimeBombComment - TODO comments with an expiry date"},{"id":"/2023/10/12/index","metadata":{"permalink":"/help/blog/2023/10/12/index","source":"@site/blog/2023-10-12/index.md","title":"Adding logging","description":"Adding logging for a project should  be simple, right ?","date":"2023-10-12T00:00:00.000Z","formattedDate":"October 12, 2023","tags":[],"readingTime":1.75,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Adding WebAPI","permalink":"/help/blog/2023/10/28/index"},"nextItem":{"title":"Refactoring","permalink":"/help/blog/2023/08/31/index"}},"content":"import ADR001 from \'../../docs/ADR/ADR001.md\'\\r\\n\\r\\n\\r\\nAdding logging for a project should  be simple, right ? \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nAfter all, we have the ADR and we have ILogger from Microsoft and the NLOG Framework\\r\\n\\r\\n<ADR001 />\\r\\n\\r\\n\\r\\n## Implementation\\r\\n\\r\\n\\r\\nFirst, add to the constructor of each class the Ilogger parameter.\\r\\n\\r\\nThen , to automatically instrument each method of class with logging , I use https://www.nuget.org/packages/rscg_decorator\\r\\n\\r\\n```csharp\\r\\nnamespace syncPowershellObjects;\\r\\n\\r\\nstatic internal class GlobalLogging\\r\\n{\\r\\n    public static void LogData(this ILogger logger, MethodRecognizer recognizer ,Exception? ex=null,[CallerMemberName] string name = \\"\\")\\r\\n    {\\r\\n        //TB: 2024-01-01 add activity tracing\\r\\n        //TB: 2024-01-01 add named parameters for logging\\r\\n        if (logger == null) return;\\r\\n        if (ex != null)\\r\\n        {\\r\\n            logger.LogError($\\"{name} {recognizer.UniqueId}\\");\\r\\n            if (recognizer.ValueTypeParameters.Count > 0)\\r\\n                logger.LogError($\\"{recognizer.ValueTypeParametersString}\\");\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n        \\r\\n            logger.LogInformation(ex, $\\"{name} {recognizer.UniqueId}\\");\\r\\n            if (recognizer.ValueTypeParameters.Count > 0)\\r\\n                logger.LogInformation(ex,$\\"{recognizer.ValueTypeParametersString}\\");\\r\\n        }\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nAnd in the class\\r\\n```csharp\\r\\n\\r\\npublic partial class ReceiveData_Decorator\\r\\n{\\r\\n}\\r\\n\\r\\npartial class ReceiveData : IDecoratorMethodV1\\r\\n{\\r\\n    public void EndMethod(MethodRecognizer recognizer)\\r\\n    {\\r\\n        logger.LogData(recognizer);\\r\\n    }\\r\\n\\r\\n    public void ExceptionMethod(Exception ex, MethodRecognizer recognizer)\\r\\n    {\\r\\n        logger.LogData(recognizer);\\r\\n    }\\r\\n\\r\\n    public void StartMethod(MethodRecognizer recognizer)\\r\\n    {\\r\\n        logger.LogData(recognizer);\\r\\n\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\nThe first problem is that many classes in NLOG and Microsoft Logging differs just by namespace ( ILogger, LogLevel ) . So you must be careful when write (global ) using namespaces\\r\\n\\r\\nSecond, XUnit has his ITestOutputHelper too - so we have to integrate also this.\\r\\n\\r\\nTo combine multiple loggers, CompositeLogger class is necessary . And also, because BeginScope is IDisposable , also a CompositeDisposable is necessary . \\r\\n\\r\\nSo this is the final code, that integrates OutputHelper as logger\\r\\n\\r\\n```csharp\\r\\n//Divergic.Logging.Xunit\\r\\nvar loggerOutput = outputHelper.BuildLoggerFor<TestUploadAndRetrieve>();\\r\\n//simple way\\r\\n//ILoggerFactory factory = LoggerFactory.Create(builder =>builder.AddNLog());\\r\\nNLog.LogFactory f = new NLog.LogFactory();\\r\\nNLog.SetupBuilderExtensions.LoadConfigurationFromFile(f.Setup(),\\"nlog.config\\");\\r\\nvar config = new NLog.Config.LoggingConfiguration(f);\\r\\n\\r\\nvar target = new XunitLoggerTarget(outputHelper);\\r\\nconfig.AddTarget(\\"Xunit\\", target);\\r\\n\\r\\nconfig.LoggingRules.Add(new LoggingRule(\\"*\\", NLog.LogLevel.Trace, target));\\r\\n\\r\\nILoggerFactory factory = LoggerFactory.Create(b => b.AddNLog(config));\\r\\nlogger = new CompositeLogger(factory.CreateLogger<TestUploadAndRetrieve>(), loggerOutput);\\r\\n\\r\\n```\\r\\n\\r\\nRealise that could be simpler with a simple logger => so a simpler version\\r\\n```csharp\\r\\nNLog.LogFactory f = new NLog.LogFactory();\\r\\nvar config = new NLog.Config.LoggingConfiguration(f);\\r\\n\\r\\nvar target = new XunitLoggerTarget(outputHelper);\\r\\nconfig.AddTarget(\\"Xunit\\", target);\\r\\n\\r\\nconfig.LoggingRules.Add(new LoggingRule(\\"*\\", NLog.LogLevel.Trace, target));\\r\\n\\r\\nILoggerFactory factory = LoggerFactory.Create(b => b.AddNLog(config));\\r\\nlogger = factory.CreateLogger<TestUploadAndRetrieve>();\\r\\n\\r\\n```\\r\\n\\r\\nAdding to console it is for another time"},{"id":"/2023/08/31/index","metadata":{"permalink":"/help/blog/2023/08/31/index","source":"@site/blog/2023-08-31/index.md","title":"Refactoring","description":"Now the project syncPowershellObjects is full of interfaces and classes. I need a refactoring - to, at least,separate interfaces from classes/implemented functionalities.","date":"2023-08-31T00:00:00.000Z","formattedDate":"August 31, 2023","tags":[],"readingTime":2.11,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Adding logging","permalink":"/help/blog/2023/10/12/index"},"nextItem":{"title":"Testing saving and retrieval","permalink":"/help/blog/2023/08/30/index"}},"content":"Now the project syncPowershellObjects is full of interfaces and classes. I need a refactoring - to, at least,separate interfaces from classes/implemented functionalities.\\r\\n\\r\\nIt is easy to create a new project and to add the interfaces ( with a new namespace). Somehow more difficult is to respect the rule : the interfaces must not have other the methods / properties that are not interfaces . This infers generating interfaces from classes ( VS is perfect!). \\r\\n\\r\\nSo now is how it looks( generated with  https://www.nuget.org/packages/netpackageanalyzerconsole  )\\r\\n\\r\\n```mermaid\\r\\n---\\r\\ntitle: Project Relations\\r\\n---\\r\\nflowchart TB    \\r\\n\\r\\nSyncPowershellTests--\x3esyncPowershellObjects\\r\\n\\r\\nsyncPowershellObjects--\x3esyncPowershellInterfaces\\r\\n```\\r\\n\\r\\nAnd some major versions that differs already , even if all is targeting 7.0!\\r\\n\\r\\n\\r\\n# Number of packages that differ in major version : 3\\r\\n\\r\\n\\r\\n## 1 System.Collections.Immutable\\r\\n\\r\\n```mermaid\\r\\n---\\r\\ntitle: System.Collections.Immutable\\r\\n---\\r\\n        flowchart TB\\r\\n        subgraph packages\\r\\n            System.Collections.Immutable\\r\\n\\r\\n        end\\r\\n        subgraph projects\\r\\nSyncPowershellTests(((SyncPowershellTests)))\\r\\nsyncPowershellObjects(((syncPowershellObjects)))\\r\\n    subgraph versions\\r\\n7.0.0>7.0.0]\\r\\n6.0.0>6.0.0]\\r\\n    end\\r\\nSystem.Collections.Immutable--\x3e7.0.0\\r\\n7.0.0--\x3eSyncPowershellTests\\r\\nSystem.Collections.Immutable--\x3e6.0.0\\r\\n6.0.0--\x3esyncPowershellObjects\\r\\n\\r\\n    end\\r\\n```\\r\\n\\r\\n## 2 System.Reflection.Metadata\\r\\n\\r\\n```mermaid\\r\\n---\\r\\ntitle: System.Reflection.Metadata\\r\\n---\\r\\n        flowchart TB\\r\\n        subgraph packages\\r\\n            System.Reflection.Metadata\\r\\n\\r\\n        end\\r\\n        subgraph projects\\r\\nSyncPowershellTests(((SyncPowershellTests)))\\r\\nsyncPowershellObjects(((syncPowershellObjects)))\\r\\n    subgraph versions\\r\\n7.0.0>7.0.0]\\r\\n6.0.1>6.0.1]\\r\\n    end\\r\\nSystem.Reflection.Metadata--\x3e7.0.0\\r\\n7.0.0--\x3eSyncPowershellTests\\r\\nSystem.Reflection.Metadata--\x3e6.0.1\\r\\n6.0.1--\x3esyncPowershellObjects\\r\\n\\r\\n    end\\r\\n```\\r\\n\\r\\n## 3 System.Text.Encoding.CodePages\\r\\n\\r\\n```mermaid\\r\\n---\\r\\ntitle: System.Text.Encoding.CodePages\\r\\n---\\r\\n        flowchart TB\\r\\n        subgraph packages\\r\\n            System.Text.Encoding.CodePages\\r\\n\\r\\n        end\\r\\n        subgraph projects\\r\\nSyncPowershellTests(((SyncPowershellTests)))\\r\\nsyncPowershellObjects(((syncPowershellObjects)))\\r\\n    subgraph versions\\r\\n7.0.0>7.0.0]\\r\\n6.0.0>6.0.0]\\r\\n    end\\r\\nSystem.Text.Encoding.CodePages--\x3e7.0.0\\r\\n7.0.0--\x3eSyncPowershellTests\\r\\nSystem.Text.Encoding.CodePages--\x3e6.0.0\\r\\n6.0.0--\x3esyncPowershellObjects\\r\\n\\r\\n    end\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\nAnd here are the results of the tests:\\r\\n\\r\\n## Feature: TestUploadAndRetrieve\\r\\n\\tIn order to sync powershell profile\\r\\n\\tAs an anonymous\\r\\n\\tI want to send my powershell profile\\r\\n\\tand retrieve data\\r\\n\\r\\n### \\tScenario: TestOnePC No Powershell [UseCase002] - Passed (1s 071ms)\\r\\n\\t\\tCategories: TestOnePC\\r\\n\\t\\tStep 1: GIVEN NoPowershellProfile7 IsFound For UserName \\"Andrei\\" \\"TestPCAndrei\\" - Passed (18ms)\\r\\n\\t\\tStep 2: WHEN the data is sent - Passed (1s 018ms)\\r\\n\\t\\tStep 3: THEN the return value should be an URL Ending In UserName \\"Andrei\\" \\"TestPCAndrei\\" - Passed (2ms)\\r\\n\\r\\n### \\tScenario: TestOnePC Powershell7 Exists [UseCase001] - Passed (1s 061ms)\\r\\n\\t\\tCategories: TestOnePC\\r\\n\\t\\tStep 1: GIVEN PowershellProfile7 IsFound For UserName \\"Andrei\\" \\"TestPCAndrei\\" [value: \\"text\\"] - Passed (2ms)\\r\\n\\t\\tStep 2: WHEN the data is sent - Passed (1s 048ms)\\r\\n\\t\\tStep 3: THEN the return value should be an URL Ending In UserName \\"Andrei\\" \\"TestPCAndrei\\" With ID - Passed (1ms)\\r\\n\\r\\n### \\tScenario: TestOnePC Powershell7 Exists RetrieveData [UseCase003] - Passed (1s 031ms)\\r\\n\\t\\tCategories: TestOnePC\\r\\n\\t\\tStep 1: GIVEN PowershellProfile7 IsFound For UserName \\"Andrei\\" \\"TestPCAndrei\\" [value: \\"text\\"] - Passed (<1ms)\\r\\n\\t\\tStep 2: WHEN the data is sent - Passed (1s 012ms)\\r\\n\\t\\tStep 3: THEN the return value should be an URL Ending In UserName \\"Andrei\\" \\"TestPCAndrei\\" With ID - Passed (<1ms)\\r\\n\\t\\tStep 4: AND Can Retrieve Data [userName: \\"Andrei\\"] [pc: \\"TestPCAndrei\\"] [pwshNumber: \\"7\\"] [retValue: \\"text\\"] - Passed (5ms)"},{"id":"/2023/08/30/index","metadata":{"permalink":"/help/blog/2023/08/30/index","source":"@site/blog/2023-08-30/index.md","title":"Testing saving and retrieval","description":"Now for the tests that are sending and retrieving data, it is not enough to verify with mocks/stubs ( see https://martinfowler.com/articles/mocksArentStubs.html ) .","date":"2023-08-30T00:00:00.000Z","formattedDate":"August 30, 2023","tags":[],"readingTime":0.27,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Refactoring","permalink":"/help/blog/2023/08/31/index"},"nextItem":{"title":"Analysis of the project","permalink":"/help/blog/2023/08/29/index"}},"content":"import ADR004 from \'../../docs/ADR/ADR004.md\'\\r\\n\\r\\n\\r\\nNow for the tests that are sending and retrieving data, it is not enough to verify with mocks/stubs ( see https://martinfowler.com/articles/mocksArentStubs.html ) .\\r\\n\\r\\nThere must be some real objects that saves / retrieves data, otherwise it is just mocking the answer.\\r\\n\\r\\nSo now how to store data \\r\\n\x3c!--truncate--\x3e\\r\\n<ADR004 />"},{"id":"/2023/08/29/index","metadata":{"permalink":"/help/blog/2023/08/29/index","source":"@site/blog/2023-08-29/index.md","title":"Analysis of the project","description":"Before starting writing API, I want to generate data about what I have created - packages, reference , tests .","date":"2023-08-29T00:00:00.000Z","formattedDate":"August 29, 2023","tags":[],"readingTime":0.44,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Testing saving and retrieval","permalink":"/help/blog/2023/08/30/index"},"nextItem":{"title":"Code Coverage","permalink":"/help/blog/2023/08/28/index"}},"content":"Before starting writing API, I want to generate data about what I have created - packages, reference , tests .\\r\\n\\r\\nFor tests, I have copied the PlainTextReportFormatter from https://github.com/LightBDD/LightBDD/blob/c07341ea8dc90d5c2dae74650d9bdad848978100/src/LightBDD.Framework/Reporting/Formatters/PlainTextReportFormatter.cs#L19\\r\\n\\r\\nand \\r\\n1. modified a bit ( put # in front of Summary , Scenario , Feature, )\\r\\n2. Commented new TextTableRenderer , TextTreeRenderer.Render for later use\\r\\n\\r\\nAnd voila!\\r\\n\\r\\nFor analyzing the project I use https://github.com/ignatandrei/PackageAnalyzer .\\r\\n\\r\\nThis will export the package references, the relations between packages, the packages with differences in the major ...\\r\\n\\r\\nThe result is here:\\r\\n\\r\\nhttps://ignatandrei.github.io/syncPowershellProfile/docs/category/technical-docs"},{"id":"/2023/08/28/index","metadata":{"permalink":"/help/blog/2023/08/28/index","source":"@site/blog/2023-08-28/index.md","title":"Code Coverage","description":"This is another decision - how much code coverage should be and how to obtain it.","date":"2023-08-28T00:00:00.000Z","formattedDate":"August 28, 2023","tags":[],"readingTime":0.83,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Analysis of the project","permalink":"/help/blog/2023/08/29/index"},"nextItem":{"title":"Continuing tests - no data","permalink":"/help/blog/2023/08/27/index"}},"content":"This is another decision - how much code coverage should be and how to obtain it.\\r\\n\\r\\n\\r\\nFor Code Coverage, I have worked until now with\\r\\n\\r\\nhttps://github.com/danielpalme/ReportGenerator\\r\\n\\r\\nthat works with XPlat Code Coverage\\r\\n\\r\\nhttps://learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-code-coverage?tabs=windows\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nBut now I have seen a tool that does it all:\\r\\n\\r\\nhttps://www.jetbrains.com/help/dotcover/Running_Coverage_Analysis_from_the_Command_LIne.html\\r\\n\\r\\n\\r\\nThe xml for configuring is dotnetcover.xml\\r\\n```xml\\r\\n<CoverageParams>\\r\\n  <ReportType>HTML</ReportType>\\r\\n\\r\\n  <Filters>\\r\\n    <ExcludeFilters>\\r\\n      <FilterEntry>\\r\\n        <ModuleMask>*Tests*</ModuleMask>\\r\\n      </FilterEntry>\\r\\n      <FilterEntry>\\r\\n        <ClassMask>*clsSystem*</ClassMask>\\r\\n      </FilterEntry>\\r\\n      <FilterEntry>\\r\\n        <ClassMask>*recSystem*</ClassMask>\\r\\n      </FilterEntry>\\r\\n      <FilterEntry>\\r\\n        <ClassMask>*StaticToInterface*</ClassMask>\\r\\n      </FilterEntry>\\r\\n      <FilterEntry>\\r\\n        <ClassMask>*TestPlatform*</ClassMask>\\r\\n\\r\\n      </FilterEntry>\\r\\n      <FilterEntry>\\r\\n        <ClassMask>*Refit.Implementation*</ClassMask>\\r\\n\\r\\n      </FilterEntry>\\r\\n    </ExcludeFilters>\\r\\n  </Filters>\\r\\n \\r\\n</CoverageParams>\\r\\n```\\r\\n\\r\\nAnd for code coverage, should be at least 80%. \\r\\n\\r\\nAlso, install this .net tools:\\r\\n```json\\r\\n{\\r\\n  \\"version\\": 1,\\r\\n  \\"isRoot\\": true,\\r\\n  \\"tools\\": {\\r\\n    \\"jetbrains.dotcover.globaltool\\": {\\r\\n      \\"version\\": \\"2023.2.1\\",\\r\\n      \\"commands\\": [\\r\\n        \\"dotnet-dotcover\\"\\r\\n      ]\\r\\n    },\\r\\n    \\"run-script\\": {\\r\\n      \\"version\\": \\"0.5.0\\",\\r\\n      \\"commands\\": [\\r\\n        \\"r\\"\\r\\n      ]\\r\\n    },\\r\\n    \\"powershell\\": {\\r\\n      \\"version\\": \\"7.3.6\\",\\r\\n      \\"commands\\": [\\r\\n        \\"pwsh\\"\\r\\n      ]\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nAnd to run this is the global.json\\r\\n```json\\r\\n{\\r\\n  \\"scripts\\": {\\r\\n    \\"build\\": \\"dotnet build --configuration Release\\",\\r\\n    \\"test\\": \\"dotnet dotnet-dotcover test --dcXml=dotnetcover.xml\\",\\r\\n    \\"ci\\": \\"dotnet r build && dotnet r test\\"\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nAlso, need saving this"},{"id":"/2023/08/27/index","metadata":{"permalink":"/help/blog/2023/08/27/index","source":"@site/blog/2023-08-27/index.md","title":"Continuing tests - no data","description":"Since the powershell file profile can exists or not , we need a new UseCase","date":"2023-08-27T00:00:00.000Z","formattedDate":"August 27, 2023","tags":[],"readingTime":1.14,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Code Coverage","permalink":"/help/blog/2023/08/28/index"},"nextItem":{"title":"Documentation","permalink":"/help/blog/2023/08/26/index"}},"content":"import UseCase002 from \'../../docs/UseCases/UseCase002.md\'\\r\\n\\r\\n\\r\\nSince the powershell file profile can exists or not , we need a new UseCase\\r\\n\\r\\nFirst , rename use cases from 003 to 030 - to let space for others.\\r\\n\\r\\nSo a new \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n<UseCase002 />\\r\\n\\r\\n\\r\\nSo how to test when the original code is like\\r\\n\\r\\n```csharp\\r\\nvar powershell7Profile =Environment.GetFolderPath( Environment.SpecialFolder.MyDocuments );\\r\\npowershell7Profile = Path.Combine(powershell7Profile, \\"WindowsPowerShell\\", \\"Microsoft.PowerShell_profile.ps1\\");\\r\\nDataToBeSent dataToBeSent = new ();\\r\\ndataToBeSent.UserName=Environment.UserName;\\r\\ndataToBeSent.PC = Environment.MachineName;\\r\\nif (File.Exists(powershell7Profile))\\r\\n{\\r\\n    dataToBeSent.Powershell = await File.ReadAllTextAsync(powershell7Profile);\\r\\n    dataToBeSent.PowershellNumber = 7;\\r\\n}\\r\\nreturn dataToBeSent;\\r\\n```\\r\\n\\r\\n?\\r\\n\\r\\nSimple - replace the static Environment with an interface using https://www.nuget.org/packages/RSCG_Static/  -  this is the code:\\r\\n\\r\\n```csharp\\r\\nprivate readonly ISystem_Environment environment;\\r\\nprivate readonly ISystem_IO_File file;\\r\\nprivate readonly ISystem_IO_Path path;\\r\\n\\r\\npublic DataGatherer(ISystem_Environment environment, ISystem_IO_File file, ISystem_IO_Path path)\\r\\n{\\r\\n    this.environment = environment;\\r\\n    this.file = file;\\r\\n    this.path = path;\\r\\n}\\r\\npublic async Task<DataToBeSent> GetData()\\r\\n{\\r\\n    var powershell7Profile =environment.GetFolderPath( Environment.SpecialFolder.MyDocuments );\\r\\n    powershell7Profile = path.Combine(powershell7Profile, \\"WindowsPowerShell\\", \\"Microsoft.PowerShell_profile.ps1\\");\\r\\n    DataToBeSent dataToBeSent = new ();\\r\\n    dataToBeSent.UserName=Environment.UserName;\\r\\n    dataToBeSent.PC = Environment.MachineName;\\r\\n    if (file.Exists(powershell7Profile))\\r\\n    {\\r\\n        dataToBeSent.Powershell = await file.ReadAllTextAsync(powershell7Profile, CancellationToken.None);\\r\\n        dataToBeSent.PowershellNumber = 7;\\r\\n    }\\r\\n    return dataToBeSent;\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\nAlso, for generating Mocks fast, I will use [Rocks](https://github.com/JasonBock/Rocks/)\\r\\n\\r\\n```csharp\\r\\n\\r\\nvar en = Rock.Create<ISystem_Environment>();\\r\\nen.Methods().GetFolderPath(Arg.Any<Environment.SpecialFolder>()).Returns(\\"\\");\\r\\nen.Properties().Getters().UserName().Returns(userName);\\r\\nen.Properties().Getters().MachineName().Returns(pc);\\r\\n\\r\\nvar path = Rock.Create<ISystem_IO_Path>();\\r\\npath.Methods().Combine(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<string>()).Returns(\\"\\");\\r\\nvar file = Rock.Create<ISystem_IO_File>();\\r\\nfile.Methods().Exists(Arg.Any<string?>()).Returns(false);\\r\\n\\r\\nDataGatherer gatherer = new(en.Instance(), file.Instance(),path.Instance());\\r\\n```\\r\\n\\r\\nAnd the BDD test looks like this:\\r\\n```csharp\\r\\nawait Runner            \\r\\n    .AddAsyncSteps(\\r\\n    _ =>Given_NoPowershellProfile7_IsFound(),\\r\\n    _ => When_the_user_want_to_sent()\\r\\n    )\\r\\n    .AddSteps(\\r\\n        _=>Then_the_return_value_should_be_an_URL_Ending_In_UserName_And_PC(userName,pc)\\r\\n    ).RunAsync();\\r\\n```"},{"id":"/2023/08/26/index","metadata":{"permalink":"/help/blog/2023/08/26/index","source":"@site/blog/2023-08-26/index.md","title":"Documentation","description":"I have started documentation about how to use, put the ADR and UseCases in their own folder, modified links, added about.","date":"2023-08-26T00:00:00.000Z","formattedDate":"August 26, 2023","tags":[],"readingTime":0.105,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Continuing tests - no data","permalink":"/help/blog/2023/08/27/index"},"nextItem":{"title":"Starting tests","permalink":"/help/blog/2023/08/25/index"}},"content":"I have started documentation about how to use, put the ADR and UseCases in their own folder, modified links, added about."},{"id":"/2023/08/25/index","metadata":{"permalink":"/help/blog/2023/08/25/index","source":"@site/blog/2023-08-25/index.md","title":"Starting tests","description":"For starting tests there is a plethora of frameworks. What we want is to","date":"2023-08-25T00:00:00.000Z","formattedDate":"August 25, 2023","tags":[],"readingTime":0.18,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Documentation","permalink":"/help/blog/2023/08/26/index"},"nextItem":{"title":"Use Cases as mermaid","permalink":"/help/blog/2023/08/24/index"}},"content":"import ADR003 from \'../../docs/ADR/ADR003.md\'\\r\\n\\r\\n\\r\\nFor starting tests there is a plethora of frameworks. What we want is to \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n1. Make it fast\\r\\n2. See the results in a good form\\r\\n\\r\\n\\r\\nSo we start \\r\\n\\r\\n<ADR003 />"},{"id":"/2023/08/24/index","metadata":{"permalink":"/help/blog/2023/08/24/index","source":"@site/blog/2023-08-24/index.md","title":"Use Cases as mermaid","description":"Modified use cases to see the interaction as mermaid.","date":"2023-08-24T00:00:00.000Z","formattedDate":"August 24, 2023","tags":[],"readingTime":0.14,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Starting tests","permalink":"/help/blog/2023/08/25/index"},"nextItem":{"title":"General Architecture","permalink":"/help/blog/2023/08/23/index"}},"content":"import UseCase001 from \'../../docs/UseCases/UseCase001.md\'\\r\\nimport UseCase030 from \'../../docs/UseCases/UseCase030.md\'\\r\\nimport UseCase040 from \'../../docs/UseCases/UseCase040.md\'\\r\\n\\r\\n\\r\\nModified use cases to see the interaction as mermaid.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n<UseCase001 />\\r\\n\\r\\n<UseCase030 />\\r\\n\\r\\n<UseCase040 />"},{"id":"/2023/08/23/index","metadata":{"permalink":"/help/blog/2023/08/23/index","source":"@site/blog/2023-08-23/index.md","title":"General Architecture","description":"I want to have a simple application , without fuss. It will be an WebAPI Application, a Database and a SPA app.","date":"2023-08-23T00:00:00.000Z","formattedDate":"August 23, 2023","tags":[],"readingTime":0.285,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Use Cases as mermaid","permalink":"/help/blog/2023/08/24/index"},"nextItem":{"title":"Use Cases","permalink":"/help/blog/2023/08/22/index"}},"content":"import ADR002 from \'../../docs/ADR/ADR002.md\'\\r\\n\\r\\n\\r\\nI want to have a simple application , without fuss. It will be an WebAPI Application, a Database and a SPA app.\\r\\n\\r\\nModifications :\\r\\n    Added also use case 4, the list of users\\r\\n    Added also max dimension for files\\r\\n    Refactored useCases to their folder\\r\\n\\r\\nHere it comes the ADR :\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n<ADR002 />"},{"id":"/2023/08/22/index","metadata":{"permalink":"/help/blog/2023/08/22/index","source":"@site/blog/2023-08-22/index.md","title":"Use Cases","description":"I want to describe the application in detail - so what\'s best than a use case ?","date":"2023-08-22T00:00:00.000Z","formattedDate":"August 22, 2023","tags":[],"readingTime":0.845,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"General Architecture","permalink":"/help/blog/2023/08/23/index"},"nextItem":{"title":"Work on documentation","permalink":"/help/blog/2023/08/21/index"}},"content":"I want to describe the application in detail - so what\'s best than a use case ?\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Use Case 1 : No Authentication , upload\\r\\n\\r\\n\\r\\nFrom his PC the user will have a powershell to send  $PROFILE.CurrentUserCurrentHost and current user name  [Environment]::UserName and PC name [Environment]::MachineName to the site ( see Use Case 3)   . The username and all data  will be deleted after 30 days . The powershell should be of max 4 MB size.\\r\\n\\r\\n\\r\\n## Use Case 20: Authenticated user .\\r\\n\\r\\nSame with UseCase 1 , just the user is authenticated first with user name + pwd and his profile will remain. \\r\\n\\r\\n\\r\\n## Use case 30:  User can see data for a user name\\r\\n\\r\\nUser can  the page /userName/ the PC(s) with a link to download the file and a powershell to  execute that will overwrite on his new PC the $PROFILE.CurrentUserCurrentHost\\r\\n\\r\\n## Use case 40:  User can all user names\\r\\n\\r\\nUser can  the page /u and find the list of all users."},{"id":"/2023/08/21/index","metadata":{"permalink":"/help/blog/2023/08/21/index","source":"@site/blog/2023-08-21/index.md","title":"Work on documentation","description":"To have automatically documentation , I have created","date":"2023-08-21T00:00:00.000Z","formattedDate":"August 21, 2023","tags":[],"readingTime":0.37,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Use Cases","permalink":"/help/blog/2023/08/22/index"},"nextItem":{"title":"Documentation","permalink":"/help/blog/2023/08/20/index"}},"content":"To have automatically documentation , I have created\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n##  Basic Code Build when push \\r\\n\\r\\nWhen pushing, docusaurus is build and pushed to /docs => https://ignatandrei.github.io/syncPowershellProfile/blog . Do not forget Settings => Actions => Workflow permission => read / write \\r\\n\\r\\nSee build.yml from https://github.com/ignatandrei/syncPowershellProfile/releases/tag/vDocumentation \\r\\n\\r\\n\\r\\n## Added docusaurus blog\\r\\n\\r\\nModified some settings such as facebook reference in the files that point to github.\\r\\n\\r\\nAdded ADR folder for architecture decision records.\\r\\n\\r\\n## Link to code\\r\\n\\r\\nhttps://github.com/ignatandrei/syncPowershellProfile/releases/tag/vDocumentation"},{"id":"/2023/08/20/index","metadata":{"permalink":"/help/blog/2023/08/20/index","source":"@site/blog/2023-08-20/index.md","title":"Documentation","description":"I want the project start with documentation - too many times I wrote the code without documentation.","date":"2023-08-20T00:00:00.000Z","formattedDate":"August 20, 2023","tags":[],"readingTime":0.19,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Work on documentation","permalink":"/help/blog/2023/08/21/index"},"nextItem":{"title":"Start project","permalink":"/help/blog/2023/08/19/index"}},"content":"import ADR001 from \'../../docs/ADR/ADR001.md\'\\r\\n\\r\\n\\r\\nI want the project start with documentation - too many times I wrote the code without documentation.\\r\\n\\r\\nSo I am ready for the first decision - what documentation engine to use.\\r\\n\x3c!--truncate--\x3e\\r\\n<ADR001 />"},{"id":"/2023/08/19/index","metadata":{"permalink":"/help/blog/2023/08/19/index","source":"@site/blog/2023-08-19/index.md","title":"Start project","description":"Because I am moving from PC to PC and I use powershell ( ok , windows terminal ) I decide to have the $profile synchronized easy","date":"2023-08-19T00:00:00.000Z","formattedDate":"August 19, 2023","tags":[],"readingTime":1.385,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Documentation","permalink":"/help/blog/2023/08/20/index"},"nextItem":{"title":"Welcome","permalink":"/help/blog/welcome"}},"content":"Because I am moving from PC to PC and I use powershell ( ok , windows terminal ) I decide to have the $profile synchronized easy \\r\\nWhat I need is :\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n1. Must upload $profile from local to a site easy  ( preferably powershell code )\\r\\n2. Must download $profile from site to local easy ( preferably powershell code )\\r\\n3. I can inspire from others profile - and improve mine\\r\\n\\r\\n-----\\r\\n\\r\\nNow let\'s start an investigation to see \\r\\n1. if someone else have been doing this work\\r\\n2. where a profile is located  \\r\\n\\r\\nFor 1 , apparently more people have started - e.g. https://github.com/tobyscales/ps-gitprofile , https://xkln.net/blog/securely-synchronizing-powershell-profiles-across-multiple-computers/  , https://compiledexperience.com/blog/posts/powershell-profile - but I cannot find an easy solution to store and retrieve profiles.\\r\\n\\r\\nFor 2 , oh - there are many $profile . Let\'s  read the documentation \\r\\nhttps://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles\\r\\n\\r\\nFor powershell 5\\r\\n```\\r\\nPS C:\\\\Users\\\\ignat> $PSVersionTable. PSVersion\\r\\n\\r\\nMajor  Minor  Build  Revision\\r\\n-----  -----  -----  --------\\r\\n5      1      19041  3031\\r\\n\\r\\n\\r\\nPS C:\\\\Users\\\\ignat> $PROFILE | Select-Object *\\r\\n\\r\\n\\r\\nAllUsersAllHosts       : C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\profile.ps1\\r\\nAllUsersCurrentHost    : C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\Microsoft.PowerShell_profile.ps1\\r\\nCurrentUserAllHosts    : C:\\\\Users\\\\ignat\\\\Documents\\\\WindowsPowerShell\\\\profile.ps1\\r\\nCurrentUserCurrentHost : C:\\\\Users\\\\ignat\\\\Documents\\\\WindowsPowerShell\\\\Microsoft.PowerShell_profile.ps1\\r\\nLength                 : 75\\r\\n```\\r\\n\\r\\n\\r\\nFor powershell 7\\r\\n```\\r\\nPS C:\\\\Users\\\\ignat> $PSVersionTable. PSVersion\\r\\n\\r\\nMajor  Minor  Patch  PreReleaseLabel BuildLabel\\r\\n-----  -----  -----  --------------- ----------\\r\\n7      3      6\\r\\n\\r\\nPS C:\\\\Users\\\\ignat> $PROFILE | Select-Object *\\r\\n\\r\\nAllUsersAllHosts       : C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.PowerShell_7.3.6.0_x64__8wekyb3d8bbwe\\\\profile.ps1\\r\\nAllUsersCurrentHost    : C:\\\\Program Files\\\\WindowsApps\\\\Microsoft.PowerShell_7.3.6.0_x64__8wekyb3d8bbwe\\\\Microsoft.PowerSh\\r\\n                         ell_profile.ps1\\r\\nCurrentUserAllHosts    : C:\\\\Users\\\\ignat\\\\Documents\\\\PowerShell\\\\profile.ps1\\r\\nCurrentUserCurrentHost : C:\\\\Users\\\\ignat\\\\Documents\\\\PowerShell\\\\Microsoft.PowerShell_profile.ps1\\r\\nLength                 : 68\\r\\n\\r\\n\\r\\nPS C:\\\\Users\\\\ignat>\\r\\n\\r\\n```\\r\\n\\r\\nFor Powershell ISE\\r\\n```\\r\\nPS C:\\\\Users\\\\ignat> $PSVersionTable. PSVersion\\r\\n$PROFILE | Select-Object *\\r\\n\\r\\nMajor  Minor  Build  Revision\\r\\n-----  -----  -----  --------\\r\\n5      1      19041  3031    \\r\\n\\r\\nAllUsersAllHosts       : C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\profile.ps1\\r\\nAllUsersCurrentHost    : C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\Microsoft.PowerShellISE_profile.ps1\\r\\nCurrentUserAllHosts    : C:\\\\Users\\\\ignat\\\\Documents\\\\WindowsPowerShell\\\\profile.ps1\\r\\nCurrentUserCurrentHost : C:\\\\Users\\\\ignat\\\\Documents\\\\WindowsPowerShell\\\\Microsoft.PowerShellISE_profile.ps1\\r\\nLength                 : 78\\r\\n\\r\\n```\\r\\n\\r\\nSo I am ready to start the application ."},{"id":"welcome","metadata":{"permalink":"/help/blog/welcome","source":"@site/blog/1970-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"1970-08-26T00:00:00.000Z","formattedDate":"August 26, 1970","tags":[{"label":"facebook","permalink":"/help/blog/tags/facebook"},{"label":"hello","permalink":"/help/blog/tags/hello"},{"label":"docusaurus","permalink":"/help/blog/tags/docusaurus"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"prevItem":{"title":"Start project","permalink":"/help/blog/2023/08/19/index"},"nextItem":{"title":"MDX Blog Post","permalink":"/help/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\r\\n\\r\\nSimply add Markdown files (or folders) to the `blog` directory.\\r\\n\\r\\nRegular blog authors can be added to `authors.yml`.\\r\\n\\r\\nThe blog post date can be extracted from filenames, such as:\\r\\n\\r\\n- `2019-05-30-welcome.md`\\r\\n- `2019-05-30-welcome/index.md`\\r\\n\\r\\nA blog post folder can be convenient to co-locate blog post images:\\r\\n\\r\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\r\\n\\r\\nThe blog supports tags as well!\\r\\n\\r\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/help/blog/mdx-blog-post","source":"@site/blog/1970-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"1970-08-01T00:00:00.000Z","formattedDate":"August 1, 1970","tags":[{"label":"docusaurus","permalink":"/help/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"prevItem":{"title":"Welcome","permalink":"/help/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/help/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\r\\n\\r\\n:::tip\\r\\n\\r\\nUse the power of React to create interactive blog posts.\\r\\n\\r\\n```js\\r\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\r\\n```\\r\\n\\r\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\r\\n\\r\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/help/blog/long-blog-post","source":"@site/blog/1970-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"1970-05-29T00:00:00.000Z","formattedDate":"May 29, 1970","tags":[{"label":"hello","permalink":"/help/blog/tags/hello"},{"label":"docusaurus","permalink":"/help/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Endilie Yacop Sucipto","title":"Maintainer of Docusaurus","url":"https://github.com/endiliey","imageURL":"https://github.com/endiliey.png","key":"endi"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"endi","tags":["hello","docusaurus"]},"prevItem":{"title":"MDX Blog Post","permalink":"/help/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/help/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\r\\n\\r\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/help/blog/first-blog-post","source":"@site/blog/1970-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"1970-05-28T00:00:00.000Z","formattedDate":"May 28, 1970","tags":[{"label":"hola","permalink":"/help/blog/tags/hola"},{"label":"docusaurus","permalink":"/help/blog/tags/docusaurus"}],"readingTime":0.12,"hasTruncateMarker":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"},"tags":["hola","docusaurus"]},"prevItem":{"title":"Long Blog Post","permalink":"/help/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);